-- Generated by Oracle SQL Developer Data Modeler 19.2.0.182.1216
--   at:        2019-12-04 21:54:58 EET
--   site:      Oracle Database 11g
--   type:      Oracle Database 11g



CREATE TABLE cart (
    cart_id            NUMBER(4) NOT NULL,
    ip_add             VARCHAR2(250),
    qty                NUMBER(4) NOT NULL,
    products_prod_id   NUMBER(4) NOT NULL,
    user_id            NUMBER(4)
);

ALTER TABLE cart ADD CONSTRAINT cart_pk PRIMARY KEY ( cart_id );

CREATE TABLE categories (
    cat_id      NUMBER(4) NOT NULL,
    cat_title   VARCHAR2(50) NOT NULL
);

ALTER TABLE categories ADD CONSTRAINT categories_pk PRIMARY KEY ( cat_id );

CREATE TABLE describtion (
    desc_id      NUMBER(4) NOT NULL,
    desc_ticle   VARCHAR2(255)
);

ALTER TABLE describtion ADD CONSTRAINT describtion_pk PRIMARY KEY ( desc_id );

CREATE TABLE ing_id_fk (
    ingredients_ing_id   NUMBER(4) NOT NULL,
    products_prod_id     NUMBER(4) NOT NULL
);

ALTER TABLE ing_id_fk ADD CONSTRAINT ing_id_fk_pk PRIMARY KEY ( ingredients_ing_id,
                                                                products_prod_id );

CREATE TABLE ingredients (
    ing_id      NUMBER(4) NOT NULL,
    ing_title   VARCHAR2(50) NOT NULL
);

ALTER TABLE ingredients ADD CONSTRAINT ingredients_pk PRIMARY KEY ( ing_id );

CREATE TABLE orders (
    order_id            NUMBER(4) NOT NULL,
    user_info_user_id   NUMBER(4) NOT NULL,
    qty                 NUMBER(4) NOT NULL,
    trx_id              VARCHAR2(250),
    p_status            VARCHAR2(20),
    product_id          NUMBER(4)
);

ALTER TABLE orders ADD CONSTRAINT qty_ck CHECK ( qty > 0 );

ALTER TABLE orders
    ADD CONSTRAINT status_ck CHECK ( p_status IN (
        'completed',
        'failure'
    ) );

ALTER TABLE orders ADD CONSTRAINT orders_pk PRIMARY KEY ( order_id );

CREATE TABLE products (
    prod_id               NUMBER(4) NOT NULL,
    prod_title            VARCHAR2(30) NOT NULL,
    prod_image            VARCHAR2(255),
    prod_price            NUMBER(5, 2) NOT NULL,
    prod_keywords         VARCHAR2(30),
    fabrication_date      DATE,
    expiration_date       DATE NOT NULL,
    categories_cat_id     NUMBER(4) NOT NULL,
    describtion_desc_id   NUMBER(4) NOT NULL,
    stoc                  NUMBER(4) NOT NULL
);

ALTER TABLE products ADD CONSTRAINT prod_price_ck CHECK ( prod_price > 0 );

ALTER TABLE products ADD CONSTRAINT stoc_ck CHECK ( stoc > 0 );

CREATE UNIQUE INDEX products__idx ON
    products (
        describtion_desc_id
    ASC );

ALTER TABLE products ADD CONSTRAINT products_pk PRIMARY KEY ( prod_id );

CREATE TABLE user_info (
    user_id      NUMBER(4) NOT NULL,
    first_name   VARCHAR2(250),
    last_name    VARCHAR2(250),
    email        VARCHAR2(250) NOT NULL,
    password     VARCHAR2(250) NOT NULL,
    mobile       VARCHAR2(15) NOT NULL,
    address1     VARCHAR2(250) NOT NULL,
    address2     VARCHAR2(250)
);

ALTER TABLE user_info
    ADD CONSTRAINT name_ck CHECK ( length(last_name) > 1 );

ALTER TABLE user_info
    ADD CONSTRAINT email_ck CHECK ( REGEXP_LIKE ( email,
                                                  '[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9]+(\.[a-z]{2,4})' ) );

ALTER TABLE user_info
    ADD CONSTRAINT password_ck CHECK ( length(password) > 7 );

ALTER TABLE user_info
    ADD CONSTRAINT mobile_ck CHECK ( length(mobile) > 9 );

ALTER TABLE user_info ADD CONSTRAINT user_info_pk PRIMARY KEY ( user_id );

ALTER TABLE cart
    ADD CONSTRAINT cart_products_fk FOREIGN KEY ( products_prod_id )
        REFERENCES products ( prod_id );

ALTER TABLE ing_id_fk
    ADD CONSTRAINT ing_id_fk_ingredients_fk FOREIGN KEY ( ingredients_ing_id )
        REFERENCES ingredients ( ing_id );

ALTER TABLE ing_id_fk
    ADD CONSTRAINT ing_id_fk_products_fk FOREIGN KEY ( products_prod_id )
        REFERENCES products ( prod_id );

ALTER TABLE orders
    ADD CONSTRAINT orders_user_info_fk FOREIGN KEY ( user_info_user_id )
        REFERENCES user_info ( user_id );

ALTER TABLE products
    ADD CONSTRAINT products_categories_fk FOREIGN KEY ( categories_cat_id )
        REFERENCES categories ( cat_id );

ALTER TABLE products
    ADD CONSTRAINT products_describtion_fk FOREIGN KEY ( describtion_desc_id )
        REFERENCES describtion ( desc_id );

CREATE SEQUENCE cart_cart_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER cart_cart_id_trg BEFORE
    INSERT ON cart
    FOR EACH ROW
    WHEN ( new.cart_id IS NULL )
BEGIN
    :new.cart_id := cart_cart_id_seq.nextval;
END;
/

CREATE SEQUENCE categories_cat_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER categories_cat_id_trg BEFORE
    INSERT ON categories
    FOR EACH ROW
    WHEN ( new.cat_id IS NULL )
BEGIN
    :new.cat_id := categories_cat_id_seq.nextval;
END;
/

CREATE SEQUENCE describtion_desc_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER describtion_desc_id_trg BEFORE
    INSERT ON describtion
    FOR EACH ROW
    WHEN ( new.desc_id IS NULL )
BEGIN
    :new.desc_id := describtion_desc_id_seq.nextval;
END;
/

CREATE SEQUENCE ingredients_ing_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER ingredients_ing_id_trg BEFORE
    INSERT ON ingredients
    FOR EACH ROW
    WHEN ( new.ing_id IS NULL )
BEGIN
    :new.ing_id := ingredients_ing_id_seq.nextval;
END;
/

CREATE SEQUENCE orders_order_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER orders_order_id_trg BEFORE
    INSERT ON orders
    FOR EACH ROW
    WHEN ( new.order_id IS NULL )
BEGIN
    :new.order_id := orders_order_id_seq.nextval;
END;
/

CREATE SEQUENCE products_prod_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER products_prod_id_trg BEFORE
    INSERT ON products
    FOR EACH ROW
    WHEN ( new.prod_id IS NULL )
BEGIN
    :new.prod_id := products_prod_id_seq.nextval;
END;
/

CREATE SEQUENCE user_info_user_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER user_info_user_id_trg BEFORE
    INSERT ON user_info
    FOR EACH ROW
    WHEN ( new.user_id IS NULL )
BEGIN
    :new.user_id := user_info_user_id_seq.nextval;
END;
/



-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                             8
-- CREATE INDEX                             1
-- ALTER TABLE                             22
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                           7
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          7
-- CREATE MATERIALIZED VIEW                 0
-- CREATE MATERIALIZED VIEW LOG             0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0
